knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(randomForest)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rsample)
library(here)
library(purrr)
#tuesdata <- tidytuesdayR::tt_load("2020-01-28")
#sf_trees <- tuesdata$sf_trees
if (!file.exists(here("data", "tuesdata_sf_trees.RDS"))) {
tuesdata <- tidytuesdayR::tt_load("2020-01-28")
sf_trees <- tuesdata$sf_trees
# save the files to RDS objects
saveRDS(tuesdata$sf_trees, file = here("data", "tuesdata_sf_trees.RDS"))
}
#load the data
sf_trees <- readRDS(here("data", "tuesdata_sf_trees.RDS"))
as_tibble(sf_trees)
trees_df <- sf_trees %>%
mutate(
legal_status = case_when(
legal_status == "DPW Maintained" ~ legal_status,
TRUE ~ "Other"),plot_size = parse_number(plot_size)) %>%
select(-address) %>%
select(-species) %>%
na.omit() %>%
mutate_if(is.character, factor)
trees_df %>%
select_if(is.numeric) %>%
map(~summary(.))
map_chr(.x = trees_df, .f = typeof)
trees_df %>%
ggplot(aes(longitude, latitude, color = legal_status)) +
geom_point(size = 0.3, alpha = 0.6) +
labs(
title = 'Distribution of Trees by Legal Status',
subtitle = 'San Francisco Trees',
caption = "Data source: TidyTuesday 20200128",
x = 'Longitude',
y = 'Latitude',
color = 'Legal Status'
) +
theme_minimal(base_size = 12) +
theme(
legend.position = 'right',
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_color_brewer(palette = "Set2")
trees_df %>%
count(legal_status, caretaker) %>%
add_count(caretaker, wt = n, name = "caretaker_count") %>%
filter(caretaker_count > 50) %>%
group_by(legal_status) %>%
mutate(percent_legal = n / sum(n)) %>%
ggplot(aes(percent_legal, caretaker, fill = legal_status)) +
geom_col(position = "dodge") +
labs(
title = "Proportion of Trees by Legal Status and Caretaker",
subtitle = "Considering only caretakers managing over 50 trees",
caption = "Data source: TidyTuesday 20200128",
x = "% of Trees in Each Category",
y = "Caretaker",
fill = "Legal Status"
) +
theme_minimal(base_size = 12) +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_fill_brewer(palette = "Set2")
sf_trees %>%
select(tree_id, latitude, longitude) %>%
gather(measure, value, -tree_id) %>%
ggplot(aes(1, value)) +
geom_boxplot(aes(fill = measure), outlier.colour = "sandybrown") +
scale_y_continuous(n.breaks = 30) +
facet_wrap(~ measure, scales = "free_y") +
labs(
title = "Distribution of Latitude and Longitude for Trees",
subtitle = "Comparative Analysis of Tree Positions in San Francisco",
caption = "Data source: TidyTuesday 20200128",
x = "Geographic Coordinate",
y = "Value") +
theme_minimal(base_size = 12) +
theme(
strip.background = element_rect(fill = "palegreen3"),
strip.text.x = element_text(size = 10, color = "black", face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = "none"
)
set.seed(1)
trees_split <- initial_split(trees_df, strata = legal_status)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
#the best model from trying
rf_model <- randomForest(legal_status ~ .,
data = trees_train,
mtry = 9,
ntree = 1000,
nodesize = 2)
predictions <- predict(rf_model, trees_test)
confusionMatrix <- table(trees_test$legal_status, predictions)
print(confusionMatrix)
plot(rf_model)
#Prediction testing error rate:
print(error_rate<-(352+197)/(4328+197+352+1084))
set.seed(1)
trees_split <- initial_split(trees_df, strata = legal_status)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
#the best model from trying
rf_model <- randomForest(legal_status ~ .,
data = trees_train,
mtry = 9,
ntree = 1000,
nodesize = 2)
predictions <- predict(rf_model, trees_test)
confusionMatrix <- table(trees_test$legal_status, predictions)
print(confusionMatrix)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 0.5, cex = 1.2)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
#Prediction testing error rate:
print(error_rate<-(352+197)/(4328+197+352+1084))
set.seed(1)
trees_split <- initial_split(trees_df, strata = legal_status)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
#the best model from trying
rf_model <- randomForest(legal_status ~ .,
data = trees_train,
mtry = 9,
ntree = 1000,
nodesize = 2)
predictions <- predict(rf_model, trees_test)
confusionMatrix <- table(trees_test$legal_status, predictions)
print(confusionMatrix)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 0.1, cex = 1.2)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
#Prediction testing error rate:
print(error_rate<-(352+197)/(4328+197+352+1084))
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 1, cex = 3)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 1, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 0.3, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 2, line = 1, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 1, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 2, adj = 0.3, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 3.5, adj = 0.3, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 3, adj = 0.3, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 0.5)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.5)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 2, line = 5, adj = 0.5, cex = 0.5)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 2, line = 5, adj = 0.5, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 6, adj = 0.5, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 5, adj = 0.5, cex = 0.8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 4, adj = 0.5, cex = 0.8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 4, adj = 0.8, cex = 0.8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 4, adj = 1.5, cex = 0.8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.3, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 4, adj = 1, cex = 0.8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(rf_model, main = "Random Forest Model")
mtext("on prediction of trees' legal status in SF", side = 3, line = 0.5, adj = 0.5, cex = 1)
mtext("Data source: TidyTuesday 20200128", side = 1, line = 4, adj = 1, cex = 0.8)
git remote -v
pkgdown::build_site()
git add docs
pkgdown::build_site()
library(randomForest)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rsample)
library(here)
library(purrr)
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
